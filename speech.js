// Speech Synthesis using Gemini AI

// Bi·∫øn l∆∞u tr·ªØ audio hi·ªán t·∫°i
let currentAudio = null;
let isPlaying = false;

// L·∫•y config - v·ªõi fallback
function getConfig() {
  if (typeof window.APP_CONFIG !== 'undefined' && window.APP_CONFIG) {
    return window.APP_CONFIG;
  }
  
  // Fallback n·∫øu config ch∆∞a load
  console.warn('APP_CONFIG ch∆∞a ƒë∆∞·ª£c load, s·ª≠ d·ª•ng config m·∫∑c ƒë·ªãnh');
  return {
    GEMINI_API_KEY: '',
    GEMINI_TTS: {
      model: 'gemini-2.0-flash-exp',
      voice: 'Puck',
      language: 'vi',
      maxTextLength: 5000
    }
  };
}

// Reset t·∫•t c·∫£ c√°c n√∫t v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng
function resetAllSpeakButtons() {
  document.querySelectorAll('.speak-btn').forEach(btn => {
    btn.classList.remove('speaking');
    btn.textContent = 'üîä';
  });
}

// D·ª´ng ƒë·ªçc hi·ªán t·∫°i
function stopSpeaking() {
  if (currentAudio) {
    currentAudio.pause();
    currentAudio.currentTime = 0;
    currentAudio = null;
    isPlaying = false;
    resetAllSpeakButtons();
  }
}

// G·ªçi Gemini API ƒë·ªÉ t·∫°o audio
async function generateSpeechWithGemini(text) {
  const config = getConfig();
  const apiKey = config.GEMINI_API_KEY;
  const ttsConfig = config.GEMINI_TTS;
  
  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${ttsConfig.model}:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: text
            }]
          }],
          generationConfig: {
            response_modalities: ['AUDIO'],
            speech_config: {
              voice_config: {
                prebuilt_voice_config: {
                  voice_name: ttsConfig.voice
                }
              }
            }
          }
        })
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    
    // L·∫•y audio data t·ª´ response
    if (data.candidates && data.candidates[0]?.content?.parts) {
      const audioPart = data.candidates[0].content.parts.find(part => part.inline_data);
      if (audioPart && audioPart.inline_data) {
        return audioPart.inline_data.data; // Base64 audio data
      }
    }
    
    throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu audio trong response');
  } catch (error) {
    console.error('Gemini TTS Error:', error);
    throw error;
  }
}

// Chuy·ªÉn ƒë·ªïi base64 sang blob URL
function base64ToAudioUrl(base64Data) {
  // Decode base64 th√†nh binary
  const binaryString = atob(base64Data);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  
  // T·∫°o blob t·ª´ binary data
  const blob = new Blob([bytes], { type: 'audio/wav' });
  return URL.createObjectURL(blob);
}

// X·ª≠ l√Ω n√∫t ƒë·ªçc vƒÉn b·∫£n v·ªõi Gemini AI
async function handleSpeak(text, button) {
  // N·∫øu ƒëang ƒë·ªçc, d·ª´ng l·∫°i
  if (isPlaying) {
    stopSpeaking();
    return;
  }
  
  try {
    // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
    resetAllSpeakButtons();
    button.classList.add('speaking');
    button.textContent = '‚è≥';
    button.disabled = true;
    
    // L·∫•y config
    const config = getConfig();
    const apiKey = config.GEMINI_API_KEY;
    
    console.log('Config loaded:', {
      hasConfig: !!config,
      hasApiKey: !!apiKey,
      apiKeyLength: apiKey ? apiKey.length : 0,
      apiKeyPreview: apiKey ? apiKey.substring(0, 10) + '...' : 'none'
    });
    
    // Ki·ªÉm tra API key
    if (!apiKey || apiKey === 'YOUR_GEMINI_API_KEY' || apiKey.trim() === '') {
      throw new Error('API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra config.js v√† ƒë·∫£m b·∫£o GEMINI_API_KEY ƒë√£ ƒë∆∞·ª£c set ƒë√∫ng.');
    }
    
    // Gi·ªõi h·∫°n ƒë·ªô d√†i text (Gemini c√≥ gi·ªõi h·∫°n)
    let processedText = text;
    const maxLength = config.GEMINI_TTS?.maxTextLength || 5000;
    if (text.length > maxLength) {
      processedText = text.substring(0, maxLength) + '...';
      console.warn(`Text qu√° d√†i, ƒë√£ c·∫Øt xu·ªëng ${maxLength} k√Ω t·ª±`);
    }
    
    // G·ªçi Gemini API ƒë·ªÉ t·∫°o audio
    const audioBase64 = await generateSpeechWithGemini(processedText);
    
    // Chuy·ªÉn ƒë·ªïi sang audio URL
    const audioUrl = base64ToAudioUrl(audioBase64);
    
    // T·∫°o audio element
    currentAudio = new Audio(audioUrl);
    isPlaying = true;
    
    // C·∫≠p nh·∫≠t UI khi b·∫Øt ƒë·∫ßu ph√°t
    button.textContent = '‚è∏';
    button.disabled = false;
    
    // X·ª≠ l√Ω khi audio k·∫øt th√∫c
    currentAudio.onended = () => {
      button.classList.remove('speaking');
      button.textContent = 'üîä';
      isPlaying = false;
      currentAudio = null;
      // Gi·∫£i ph√≥ng blob URL
      URL.revokeObjectURL(audioUrl);
    };
    
    // X·ª≠ l√Ω l·ªói khi ph√°t audio
    currentAudio.onerror = (error) => {
      console.error('Audio playback error:', error);
      button.classList.remove('speaking');
      button.textContent = 'üîä';
      button.disabled = false;
      isPlaying = false;
      currentAudio = null;
      URL.revokeObjectURL(audioUrl);
    };
    
    // Ph√°t audio
    await currentAudio.play();
    
  } catch (error) {
    console.error('Speech error:', error);
    button.classList.remove('speaking');
    button.textContent = 'üîä';
    button.disabled = false;
    isPlaying = false;
    
    // Hi·ªÉn th·ªã l·ªói cho user
    alert(`L·ªói khi t·∫°o gi·ªçng ƒë·ªçc: ${error.message}`);
  }
}